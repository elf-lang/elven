cleanupexts := "*.pch|*.ilk|*.lib|*.exe|*.exp|*.pdb"

otargets := {"renderer", "platform", "draw_2d", "audio", "fonts"}

includes := {"elf", "miniaudio", "stb"}
defines := {"_DEBUG","PLATFORM_DESKTOP"}
libs := {"..\\elf\\elf", "User32", "Shell32", "Gdi32", "Winmm", "Comdlg32"}
exename := "elven"

dolinking = true
docleaning = false

cleantask = fun() ? {
	paths := elf.get_path_list(".", 0)
	for path = paths[...] ? {
		if path:match(cleanupexts) ? {
			elf.pf("clean: ", path)
			// elf.delete_file(path)
		}
	}
}
cleantask()

elf.create_directory("build")
if elf.change_work_dir("build") != true ? {
	elf.exit(1)
}

if docleaning ? {
	cleantask()
}

// pre-generate part of command
prebuildcmd := "clang-cl /nologo -Od -Zi"

for include = includes[...] ? {
	prebuildcmd += f" /I..\\%{include}"
}
for define = defines[...] ? {
	prebuildcmd += f" /D%{define}"
}

for target = otargets[...] ? {
	inputpath := f"..\\src\\%{target}.c"
	outputpath := f"%{target}.obj"

	do_make := true

	// get last write time of input
	{
		file := elf.open_file(inputpath, "r")

		writetimeinput := elf.get_file_times(file).write

		elf.close_file(file)

		file = elf.open_file(outputpath, "r")

		// nil if not present
		if file ? {

			writetimeoutput := elf.get_file_times(file).write
			elf.close_file(file)

			if writetimeoutput > writetimeinput ? {
				do_make = false
			}
		}
	}

	if do_make ? {
		elf.pf("make: ", inputpath)
		buildcmd := prebuildcmd + f" /c %{inputpath} /Fo%{outputpath}"
		// elf.pf(buildcmd)
		elf.create_process(buildcmd)
		dolinking = true
	}
}

linktask = fun() ? {
	elf.pf("link: ")
	linkcmd := prebuildcmd + " ..\\src\\main.c"
	for target = otargets[...] ? {
		linkcmd += f" %{target}.obj"
	}
	for lib = libs[...] ? {
		linkcmd += f" %{lib}.lib"
	}
	linkcmd += f" /OUT:%{exename}.exe"
	elf.pf(linkcmd)
	elf.create_process(linkcmd)
}

if dolinking ? {
	linktask()
}






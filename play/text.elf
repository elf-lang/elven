InitWindow("Text", 320 * 3, 180 * 3, 1)
InitAudio()
LoadFont("C:\\Windows\\Fonts\\times.ttf")


notenames := { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B" }

//
// the c major scale orders notes in this fashion,
//	the kalimba orders things in this scale
//
cmajor = { 'C', 'D', 'E', 'F', 'G', 'A', 'B' }

keynotes = {
	"D6",
	"B5",
	"G5",
	"E5",
	"C5",
	"A4",
	"F4",
	"D4",
	"B3",
	"G3",
	"F3",
	"A3",
	"C4",
	"E4",
	"G4",
	"B4",
	"D5",
	"F5",
	"A5",
	"C6",
	"E6",
}

notename_to_base_note_index := {}
{
	i := 0
	for name = notenames[...] ? {
		notename_to_base_note_index[name] = i
		i += 1
	}
}


//
// These are my learning notes:
//
//
// Based on the 12-ET (equal temperament) music system,
// where tones are divided into 12 equal parts, each
// part is called a semitone, and every 12 semitones,
// the frequency doubles.
// For instance, from A4 to A5, the frequency goes
// from 440hz to 880hz.
//	The input here is a MIDI note number, MIDI is a
// protocol for musical devices, and each MIDI note
// number encodes a note, A4 is number 69.
// So all this function is doing is using the
// frequency of A4 to determine what the frequency of
// of the given MIDI note number is.
// For instance, if MIDI is 69, then the function returns
// 440, if MIDI is 69 + 12, then the function returns
// 880. When MIDI is 69, the exponent evaluates to 0,
// and the output of pow is 1. When MIDI is 69 + 12,
// the exponent is one, and pow outputs 2, so the
// frequency doubles every 12 semitones.
//
get_note_frequency_from_midi_number = fun(midi) ? {
	--> 440.0 * pow(2.0, (midi - 69) / 12.0);
}

get_note_name_from_midi_number = fun(midi) ? {
	octave := midi / 12 - 1
	--> notenames:idx(midi % 12) + octave
}

//
// the name of the note is a string formatted
// in this manner:
//
//	OCTAVE_NUMBER ::= '-'(optional) POSITIVE_INTEGER
//
//	NOTE_NAME ::= CAPITAL_LETTER OCTAVE_NUMBER
//
// C0 -> 0
// C1 -> 12
// C2 -> 13
// C3 -> 3
// A4 -> 69
//
//

get_midi_number_from_base_note_and_octave = fun(base, octave) ? {
	--> base + (octave + 1) * 12
}

get_midi_number_from_note_name = fun(name) ? {
	digit := "":append_char(name[0])
	base := notename_to_base_note_index[digit]
	octave := name[1]
	if octave == '-' ? {
		octave = - (name[2] - '0')
	} else{
		octave -= '0'
	}
	--> get_midi_number_from_base_note_and_octave(base, octave)
}

note_name_to_degree_map = {}
degree_to_note_name_map = {}
{
	i := 0
	for name = cmajor[...] ? {
		i += 1
		note_name_to_degree_map[name] = i
		degree_to_note_name_map[i] = name
	}
}



load_music_sheet = fun(name) ? {
	file := elf.open_file(name, "rb")
	defer elf.close_file(file)
	contents := elf.read_file(file)
	music := {}

	line_number := 1
	i := 0
	while i < contents:length() ? {
		notes := {}
		paren := 0

		if contents[i] == '(' ? {
			i += 1
			paren += 1
		}

		is_note := false
		loop := true
		while loop ? {
			c0 := contents[i + 0]
			c1 := contents[i + 1]

			i += 1
			if c0 >= '0' && c0 <= '9' ? {
				octave := 4
				if c1 == '\'' || c1 == '`' ? {
					i += 1
					octave = 5
				} else if c1 == '"' ? {
					i += 1
					octave = 6
				}

				name := degree_to_note_name_map[c0 - '0']
				note := "":append_char(name)

				base := notename_to_base_note_index[note]
				midi := get_midi_number_from_base_note_and_octave(base, octave)

				// note := "":append_char(c0) + octave
				notes:add(midi)

				is_note = true
			} else if c0 == '-' ? {
				is_note = true
			} else if c0 == ' ' ? {
				is_note = true
			} else if c0 == '(' ? {
				elf.pf("unexpected '(', line: ", line_number, ", ", paren)
				elf.error()
			} else if c0 == ')' ? {
				if paren < 1 ? {
					elf.error("unexpected ')'")
				}
				loop = false
				break
			} else if c0 == '\t' ? {
			} else if c0 == '\n' ? {
				is_note = true
				line_number += 1
			} else if c0 == '\r' ? {
			} else {
				elf.pf("unexpected token: ", c0)
				elf.error()
			}
			if paren < 1 ? {
				loop = false
				break
			}
		}

		if paren > 0 ? {
			if contents[i] == ')' ? {
				i += 1
			} else {
				// elf.pf("expected ')'")
			}
		}
		if is_note ? {
			music:add(notes)
		}
	}
	--> music
}


get_note_index_from_note_name = fun(note) ? {
	name := note[0]
	octave := note[1]
	degree := note_name_to_degree_map[name]
	if degree == nil ? {
		degree = "nil"
	}
	--> degree
}

//
// load the sound library, sounds are indexed
// by MIDI number
//
sounds := {}
{
	elf.change_work_dir("kalimba\\sounds")
	defer elf.change_work_dir("..\\..")

	get_file_name_info = fun(name) ? {
		trash := "Kalimba - Kalimba "
		note := name[trash:length() + 0]
		octave := name[trash:length() + 1] - '0'

		base := notename_to_base_note_index["":append_char(note)]
		midi := get_midi_number_from_base_note_and_octave(base, octave)
		// elf.pf("note: ", "":append_char(note), ", ", octave, ", midi: ", midi)
		--> { note = note, octave = octave, midi = midi }
	}

	files := elf.list_folder(".")
	for file = files[...] ? {
		info := get_file_name_info(file.name)
		sound := LoadSound(file.name)
		//	key := "":append_char(info.note):append(info.octave)
		sounds[info.midi] = sound
	}
}

load_sound_library_folder = fun(name) {
	elf.pf("loading sound library folder: ", name)
	extract_midi_number_from_file_name := fun(name) ? {
		trash := "UR1_"
		note := "":append_char(name[trash:length() + 0], name[trash:length() + 1])
		elf.pf("name: ", name, ", note: ", note)
		midi := get_midi_number_from_note_name(note)
		--> midi
		//	trash := "Player_dyn1_rr1_"
		//	index := 0
		//	index = index * 10 + (name[trash:length() + 0] - '0')
		//	index = index * 10 + (name[trash:length() + 1] - '0')
		//	index = index * 10 + (name[trash:length() + 2] - '0')
		//	--> index + 21
	}

	library := {}

	files := elf.list_folder(name)
	for file = files[...] ? {
		midi := extract_midi_number_from_file_name(file.name)
		elf.pf("loading sound: ", file.name, ", midi: ", midi)
		sound := LoadSound(file.path)
		library[midi] = sound
	}

	--> library
}

// sounds = load_sound_library_folder("kalimba\\piano")
// sounds = load_sound_library_folder("G:\\E Drive\\Downloads\\VSCO-2-CE-1.1.0\\VSCO-2-CE-1.1.0\\Keys\\Upright Nr1")

PlayNote = fun(midi) ? {
	// midi -= 12 * 3
	// midi += 1 - midi % 2
	sound := sounds[midi]
	if sound ? {
		A_PlaySound(sound)
	} else {
		elf.pf("MIDI Note: '", midi, "' Not Found")
	}
}



random_note_name := nil

note_index := 0
note_speed := 5
note_thres := 60.0
note_timer := 0

music := load_music_sheet("kalimba\\ballade_pour_adeline.txt")

draw_notes = {}
add_draw_note = fun(midi) ? {
	x := 320 * 1.5 + (elf.random() * 2 - 1) * 100
	y := 180 * 1.5 + (elf.random() * 2 - 1) * 100
	draw_note := {
		x = x,
		y = y,
		midi = midi,
		animation_timer = 60,
	}
	draw_notes:add(draw_note)
}


while PollWindow() ? {
	Clear()
	SetColor(255, 255, 255, 255)

	if random_note_name == nil ? {
		index := ntoi(elf.random() * 8)
		octave := ntoi(elf.random() * 3 + 4)
		note_char := cmajor:idx(index)
		random_note_name = "":append_char(note_char) + octave
	}
	if Button(' ') & 2 ? {
		if random_note_name ? {
			sound := sounds[random_note_name]
			if sound ? {
				elf.pf("Playing: '", random_note_name, "'")
				A_PlaySound(sound)
			}
		}
		random_note_name = nil
	}

	{
		play_note := false

		note_timer += note_speed
		if note_timer >= note_thres ? {
			note_timer = note_timer - note_thres

			play_note = true
		}

		if play_note ? {
			notes := music:idx(note_index)
			for note = notes[...] ? {
				add_draw_note(note)
				PlayNote(note)
			}
			note_index += 1
		}
	}

	// midi := 1
	// name := get_note_name_from_midi_number(midi)
	// hz := get_note_frequency_from_midi_number(midi)
	// DrawText(320, 180, "" + midi + ", " + name + ", " + hz)
	if random_note_name ? {
		// if elf.tagof(random_note_name) == "str" ? {
		note_degree := get_note_index_from_note_name(random_note_name)
		DrawText(320, 180, "" + random_note_name + ", " + note_degree)
		// }
	}

	SolidFill()
	x0 := 32
	SetColor(255, 255, 255, 255)
	for i = 0...21 ? {
		x := x0 + i * (32 + 2)
		y := 0

		midi := get_midi_number_from_note_name(keynotes:idx(i))
		for draw_note = draw_notes[...] ? {
			if draw_note.midi == midi ? {
				alpha := 0.5 + 0.5 * (1.0 - draw_note.animation_timer / 60.0)
				SetColor(255 * alpha, 255 * alpha, 255 * alpha, 255)
				break
			} else {
				SetColor(255, 255, 255, 255)
			}
		}
		jDrawRectangle(x, y, 32, 128)
	}
	for i = 0...21 ? {
		x := x0 + i * (32 + 2)
		y := 0
		DrawText(x, y, keynotes:idx(i))
	}

	new_draw_notes := {}
	for draw_note = draw_notes[...] ? {
		alpha := draw_note.animation_timer / 60.0
		SetColor(255, 255, 255, 255 * alpha)
		name := get_note_name_from_midi_number(draw_note.midi)
		DrawText(draw_note.x, draw_note.y, name)
		draw_note.animation_timer -= 1
		if draw_note.animation_timer > 0 ? {
			new_draw_notes:add(draw_note)
		}
	}
	draw_notes = new_draw_notes

}
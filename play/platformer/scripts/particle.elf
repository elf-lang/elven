
particles = {}

add_leaf_particle = fun(pos) ? {
	--> add_particle("leaf",pos,vec2(0,-0.3),4)
}

add_particle = fun(type,pos,vel,per) ? {
	per ?= 1.0
	par := {}
	par.type			= type
	par.pos 			= pos
	par.vel 			= vel
	par.images 		= get_image_assets(type)
	par.sequencer  = new FrameSequencer(par.images:tally(),true)
	par.sequencer:set_period(per)
	par.sequencer.loops = false
	particles:add(par)
	--> par
}

tick_particles = fun(time) ? {
	new_particles := {}
	for par = particles[...] ? {
		keep := true

		par.pos += par.vel
		par.sequencer:tick(time)
		if par.sequencer.done ? {
			keep = false
		}
		if par.type == "leaf" ? {
			par.pos.x += sin(par.sequencer:get_frame() * 0.3) * 0.3
		}
		if keep ? {
			new_particles:add(par)
		}
	}
	particles = new_particles
}

draw_particles = fun(time) ? {
	for par = particles[...] ? {
		img ::= par.images:idx(par.sequencer:get_frame())
		WINDOW:set_src_image(img)
		WINDOW:draw_image(par.pos.x,par.pos.y)
	}
}


// ParticleEmitter = {
// 	__new = fun(config) ? {
// 		config ?= {}
// 		this.config = config:clone()
// 	}
// 	burst = fun(position,direction,config) ? {
// 		this.config = config ?? this.config
// 		config ?= this.config ?? {}

// 		this.direction = direction ?? this.direction
// 		direction ?= this.direction

// 		let min_num   = config.min_num    ?? 4
// 		let max_num   = config.max_num    ?? 10
// 		let min_size  = config.min_size   ?? 2
// 		let max_size  = config.max_size   ?? 10
// 		let min_speed = config.min_speed  ?? 2
// 		let max_speed = config.max_speed  ?? 4
// 		let spread    = config.spread     ?? PI * .25

// 		this.particles ?= {}

// 		let orient = direction:norm():angle()
// 		let num = ntoi(min_num + random() * (max_num - min_num))

// 		for i = 0...num ? {
// 			let angle = orient + ((random()*2.)-1.) * spread
// 			let speed = min_speed + random() * (max_speed - min_speed)
// 			let xvel = cos(angle) * speed
// 			let yvel = sin(angle) * speed
// 			let p = {
// 				position   = position:clone()
// 				vel   = vec2(xvel,yvel)
// 				timer      = 0
// 				threshold  = 1.
// 			}
// 			// if this.particles:tally() < this.limit ? {
// 			this.particles:add(p)
// 			// }
// 		}
// 	}
// 	tick = fun(time) ? {
// 		let particles = this.particles
// 		if particles ? {
// 			let new_particles = {}
// 			let nparticles = particles:tally()
// 			for i = 0...nparticles ? {
// 				let p = particles:idx(i)
// 				p.timer += time
// 				if p.timer < p.threshold ? {
// 					new_particles:add(p)
// 					_physics_update(p,time)
// 				}
// 			}
// 			this.particles = new_particles
// 		}
// 	}
// 	draw = fun() ? {
// 		let particles = this.particles
// 		if particles ? {
// 			let nparticles = particles:tally()
// 			for i = 0...nparticles ? {
// 				let p = particles:idx(i)
// 				let alpha = (1 - (p.timer / p.threshold)) * 255.0
// 				WINDOW:draw_rect(
// 				+ p.position.x + 128,
// 				- p.position.y +  64, 1, 1, 255,255,255,alpha)
// 			}
// 		}
// 	}
// }
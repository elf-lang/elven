PI      = 3.14159

InitWindow("Will I Ship It?", 128, 128, 4)

tilesheet := LoadTexture("tiles.png")


checkmap = fun(px, py, dx, dy) ? {
	x0 := ntoi((px + 0) / 8)
	y0 := ntoi((py + 0) / 8)
	x1 := ntoi((px + dx + 7) / 8)
	y1 := ntoi((py + dy + 7) / 8)
	for y = y0...y1 ? {
		row := blocks[y]
		if row == nil ? continue
		for x = x0...x1 ? {
			if row[x] ? {
				--> {
					x = x * 8,
					y = y * 8,
					bl = row[x],
				}
			}
		}
	}

	--> nil
}

are_touching = fun(a, b) ? {
	check_x := a.x + 8 > b.x && a.y + 8 > b.y
	check_y := a.x < b.x + 8 && a.y < b.y + 8
	--> check_x && check_y
}

player_dead = false
reload = true
room_x = 0
room_y = 0
track_x = 0
track_y = 0
load_room = false
offset_x = 0
offset_y = 0
particles = {}

spawn_death_particles = fun(x, y) ? {
	for dir = 0...8 ? {
		angle := PI * 2.0 / 8.0 * dir
		particles:add {
			x = x,
			y = y,
			t = 20,
			vx = sin(angle) * 3,
			vy = cos(angle) * 3,
		}
	}
}

tick_particles = fun() ? {
	SolidFill()
	new_particles := {}
	for par = particles[...] ? {
		if par.t > 0 ? {
			par.x += par.vx
			par.y += par.vy
			par.t -= 1
			size := par.t / 5.0
			DrawRectangle(par.x,par.y,size,size)
			new_particles:add(par)
		}
	}
	particles = new_particles
}

skull_tick_1 = fun() ? {
	alive := true
	--> alive
}

dir ?= fun(x) ? {
	if x < 0 ? {
		--> - 1
	} else if x > 0 ? {
		--> + 1
	} else {
		--> 0
	}
}

abs ?= fun(x) ? {
	if x < 0 ? {
		x = -x
	}
	--> x
}

skull_tick_1 = fun() ? {
	alive := true

	e := this
	e.move_dir ?= -1
	e.move_decounter ?= 20
	e.move_delay ?= 0

	e.target_pos_y0 ?= 32
	e.target_pos_y1 ?= 8
	e.target_pos_y  ?= e.target_pos_y1

	if e.move_delay > 0 ? {
		e.move_delay -= 1
	}
	if e.move_delay == 0 ? {
		if abs(e.target_pos_y - e.y) < 0.5 ? {
			if e.target_pos_y == e.target_pos_y0 ? {
				e.target_pos_y = e.target_pos_y1
			} else {
				e.target_pos_y = e.target_pos_y0
			}
		}

		d := dir(e.target_pos_y - e.y)
		e.y += d * e.yspd
	}

	--> alive
}

skull_tick_0 = fun() ? {
	alive := true

	e := this
	e.move_decounter ?= 20

	if e.move_decounter > 0 ? {
		e.move_decounter -= 1
		e.x += 0.2
		if e.move_decounter == 0 ? {
			e.move_decounter = -40
		}
	} else if e.move_decounter < 0 ? {
		e.move_decounter += 1
		e.x -= 0.2
		if e.move_decounter == 0 ? {
			e.move_decounter = 40
		}
	}

	--> alive
}

do_load_room = fun(room_x, room_y) ? {
	xofs := room_x * 16 * 8
	if room_x == 0 && room_y == 0 ? {
		skulls:add { x = 32, y = 8, tick = skull_tick_0 }
		keys:add { x = 64, y = 8 }
	}
	if room_x == 1 && room_y == 0 ? {
		skulls:add { x = xofs + 64 + 32 - 8 * 4 * 0, y = 8, tick = skull_tick_0 }
		skulls:add { x = xofs + 64 + 32 - 8 * 4 * 1, y = 8, tick = skull_tick_0 }
		skulls:add { x = xofs + 64 + 32 - 8 * 4 * 2, y = 8, tick = skull_tick_0 }
	}
	if room_x == 3 && room_y == 0 ? {
		for i = 0...8 ? {
			skulls:add {
				x = xofs + 16 + i * 16,
				y = 16,
				tick = skull_tick_1,
				yspd = 0.5,
				move_delay = i * 20
			}
		}
	}
	for y = 0...16 ? {
		blocks[room_y * 16 + y] = {}
		for x = 0...16 ? {
			blocks[room_y * 16 + y][room_x * 16 + x] = y == 0
		}
	}
}

while PollWindow() ? {

	if player_dead ? {
		player_dead = false
		spawn_death_particles(player.x + 4, player.y + 4)
		reload = true
	}

	if reload ? {
		reload = false
		room_x = 0
		room_y = 0
		player = { x = 16 * 3 * 8 + 16, y = 32, vx = 0, vy = 0 }
		load_room = true
	}
	{
		track_x = player.x + 4
		track_y = player.y + 4
	}
	{
		new_room_x := ntoi(track_x / (8 * 16))
		new_room_y := ntoi(track_y / (8 * 16))
		if new_room_x != room_x || new_room_y != room_y ? {
			room_x = new_room_x
			room_y = new_room_y
			load_room = true
			offset_x = - room_x * 8 * 16
			offset_y = - room_y * 8 * 16
		}
	}

	if load_room ? {
		blocks = {}
		keys = {}
		skulls = {}
		load_room = false
		do_load_room(room_x, room_y)
	}


	xin := (Button('D') & 1) - (Button('A') & 1)
	yin := (Button('W') & 1) - (Button('S') & 1)

	jump := Button(' ') & 2

	if player.y < 0 ? {
		player.y = 0
	}

	on_ground := player.y <= 0
	if checkmap(player.x, player.y - 1, 8, 1) ? {
		on_ground = true
	}


	if on_ground ? {
		player.vy = 0
		if jump ? {
			player.vy = 2
		}
	} else {
		player.vy -= 0.1
	}
	player.vx = xin

	player.x += player.vx

	player.y += player.vy
	if player.vy < 0 ? {
		q := checkmap(player.x, player.y - 1, 8, 8)
		if q ? {
			player.y = 8
			player.vy = 0
		}
	}


	Clear(220, 130, 130, 255)
	// Clear(121, 37, 45, 255)
	SetColor(255, 255, 255, 255)
	SetTexture(tilesheet)


	SetOffset(0, 0)
	for y = 0...16 ? {
		for x = 0...16 ? {
			bl := blocks[room_y * 16 + y][room_x * 16 + x]
			if bl ? {
				SetRegion(0, 8 * 6, 8, 8)
				DrawRectangle(x * 8, 0, 8, 8)
			}
		}
	}

	SetOffset(offset_x, offset_y)

	SetRegion(32, 12, 15, 20)
	DrawRectangle(32, 8, 15 * 2, 20 * 2)

	{
		new_keys := {}
		SetRegion(8 * 2, 0, 8, 8)
		for e = keys[...] ? {
			DrawRectangle(e.x, e.y, 8, 8)
			if are_touching(e, player) ? {

			} else {
				new_keys:add(e)
			}
		}
		keys = new_keys
	}
	{
		new_skulls := {}
		SetRegion(0, 8 * 2, 8, 8)
		for e = skulls[...] ? {
			DrawRectangle(e.x, e.y, 8, 8)
			alive := e.tick()
			if alive ? {
				if are_touching(e, player) ? {
					player_dead = true
					alive = false
				}
			}
			if alive ? {
				new_skulls:add(e)
			}
		}
		skulls = new_skulls
	}

	SetRegion(8 * 3, 0, 8, 8)
	DrawRectangle(player.x, player.y, 8, 8)

	tick_particles()
}




// this is the file elf looks for by default
load "play\\rnd.elf"
elf.change_work_dir("W:\\MicroRJ\\adve")
load "play.elf"
#eof


load "play\\rnd.elf"
load "play\\sort.elf"
elf.change_work_dir("play\\collision")
load "main.elf"
#eof

elf.pf(elf.const_expr("{0={0=1,1=2,2=3}}"))
elf.pf(elf.const_expr("7"))
elf.pf(elf.const_expr("7.0"))
elf.pf(elf.const_expr("{}"))
elf.pf(elf.const_expr("{1,2,3}"))
elf.pf(elf.const_expr("{0=1,1=2,2=3}"))

#eof



b := 0 || 1
elf.flags(1<<3)
elf.pf("0 && b: ", 7 && b)
#eof

a := 0
b := 0
c := 0
elf.pf("#getmem(a): ", #getmem(a))
elf.pf("#getmem(b): ", #getmem(b))
elf.pf("#getmem(c): ", #getmem(c))
elf.pf("#getmem(1): ", #getmem(1))
elf.pf("#getmem(0 || 1): ", #getmem(0 || 1))

d := 0 || 1
elf.pf("#getmem(d): ", #getmem(d))
elf.pf("#getexpr(d): ", #getexpr(d))


elf.flags(1<<3)
or01 := 0 || 1

elf.pf("#getmem(or01): ", #getmem(or01))
elf.pf("false && or01: ", false && or01)
if false && or01 ? {
	elf.pf("ERROR!")
}

#eof

test_and = fun(a,b) ? {
	if a ? { if b ? { --> true } }
	--> false
}
test_or = fun(a,b) ? {
	if a ? { --> true }
	if b ? { --> true }
	--> false
}
operators = {{"&&",test_and},{"||",test_or}}

generate_test_expr = fun(a,b,level) ? {
	if level > 3 ? {
		--> a
	}
	text := "(" + generate_test_expr(a,0,level+1) + " " + operators:idx(0,0) + " " + generate_test_expr(b,1,level+1) + ")"

	--> text
}

text := generate_test_expr(1,0,0)
elf.pf(text)

#eof


table = {}
for i = 0...10 ? {
	table[i] = i
}
elf.pf(table)
for i = 0...10 ? {
	elf.pf("deleting: ", i)
	elf.pf("before: ")
	elf.pf(table:keys())
	table:delete(i)
	elf.pf("after: ")
	elf.pf(table:keys())
}
#eof

test_table := {
	__new = fun() ? {}
}
xxx := test_table.__new
elf.flags(1<<3)
xxx("HERE")

#eof
elf.change_work_dir("play")
load "collision.elf"
#eof
elf.flags(1<<3)
expr ::= elf.load_expr("test_expr.elf")
elf.pf(expr)
#eof
load "worm.elf"
#eof


load "tests\\overload.elf"
#eof
load "tests\\if.elf"
load "tests\\fun.elf"
load "tests\\loops.elf"
load "tests\\prec.elf"


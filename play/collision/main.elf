// #test "hard binding error"
// warnings := #getwarnings()
// #assert warnings[0] == 0

PRESSED  = elf.gfx.Window.PRESSED
DOWN 		= elf.gfx.Window.DOWN
RELEASED = elf.gfx.Window.RELEASED

UPSCALE  	::= 4
WIND_W   	::= 128 // 320
WIND_H   	::= 128 // 240
total_time	= 0
EDITOR_MODE	= false
elf.audio.init()
VIEW = new elf.gfx.Window("Collision!",WIND_W,WIND_H,UPSCALE)
load "math.elf"
load "game.elf"
load "editor.elf"


P ::= fun(x,y) ? vec2(x*8,y*8)

//
// prepare assets for the editor and the game
//

assets={}
assets.images={
	tiles=elf.gfx.load_image("tiles.png")
}
assets.tilesets={
	tiles={
		image=assets.images.tiles,
		tile_size=8,
		name="tiles",
		groups={
			{
				name="spawners",
				id=0,
				tiles={
					{id=0 + 0, coords=P(2,0), name="key"},
					{id=0 + 1, coords=P(3,0), name="player"},
					{id=0 + 2, coords=P(0,2), name="skull"},
				}
			},
			{
				name="dirt",
				autotiler=DEFAULT_AUTOTILER,
				id=1,
				tiles={
					{id=16 + 0, coords=P(10+0,0), param="DEFAULT"},
					{id=16 + 1, coords=P(10+0,0), param="TOP_LEFT"},
					{id=16 + 2, coords=P(10+1,0), param="TOP_CENTER"},
					{id=16 + 3, coords=P(10+2,0), param="TOP_RIGHT"},
					{id=16 + 4, coords=P(10+0,1), param="MID_LEFT"},
					{id=16 + 5, coords=P(10+1,1), param="MID_CENTER"},
					{id=16 + 6, coords=P(10+2,1), param="MID_RIGHT"},
					{id=16 + 7, coords=P(10+0,2), param="BOT_LEFT"},
					{id=16 + 8, coords=P(10+1,2), param="BOT_CENTER"},
					{id=16 + 9, coords=P(10+2,2), param="BOT_RIGHT"},
				}
			}
		}
	}
}
assets.tilemaps={
	tiles={
		tileset="tiles",
		tiles={}
	}
}
assets.get_tile_info=fun(tileset,tile)?{
	if tileset.tileid_to_def==nil?{
		tileset.tileid_to_def={}
		tileid_to_def ::= tileset.tileid_to_def
		for group = tileset.groups[...] ? {
			for tiledef = group.tiles[...] ? {
				tileid_to_def[tiledef.id]=tiledef
				tiledef.group=group
			}
		}
	}
	--> tileset.tileid_to_def[tile]
}
assets.get_level_data=fun(name)?{
	file := elf.open_file("editor_save.elf","rb")
	defer elf.close_file(file)
	data := elf.const_expr(elf.read_file(file))
	--> data
}
init_game(assets)
init_editor(assets)
view::=VIEW

while view:poll() ? {
	time ::= view.time
	if view.keys['1']&RELEASED?{
		EDITOR_MODE^=1
	}
	if EDITOR_MODE?{
	}else{
		tick_game(time)
	}
	draw_game()
	if EDITOR_MODE?{
		draw_editor(time)
	}
	total_time += time
}


#eof

for plat = platforms[...] ? {
	move := vec2()
	if plat == platforms:idx(0) ? {
		move.y = sin(total_time*PI*0.5)*2
	} else {
		move.x = sin(total_time*PI*0.5)*2
	}
	plat.x+=move.x
	plat.y+=move.y
	for that = sprites[...] ? {
		iff plat:overlaps(that) ? {
			continue
		}
		plat.colliding = true
		that.colliding = true
		if plat.y < that.y ? {
			if that.v.y < 0 ? {
				that.y = plat.y + plat.h;
				that.v.y = 0
				that.v.x = 0
				that.m.x += move.x
					// that.x += move.x
				jump_buffer=1
			}
		}
	}
}

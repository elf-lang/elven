MATH ::= {
	PI   	= 3.14159,
	TAU  	= 6.28318,
	E  	= 2.71828,
}
UPSCALE  	::= 1
WIND_W   	::= 320*4
WIND_H   	::= 240*4
ASPECT_R 	::= WIND_W / iton(WIND_H)
CENTER_X 	::= WIND_W / 2
CENTER_Y 	::= WIND_H / 2

VIEW ::= new elf.gfx.Window("Collision!",WIND_W,WIND_H,UPSCALE)
PRESSED  = elf.gfx.Window.PRESSED
DOWN 		= elf.gfx.Window.DOWN
RELEASED = elf.gfx.Window.RELEASED
INITIAL_OFFSET ::= {
	x=CENTER_X,
	y=CENTER_Y
}
VIEW.ofs = INITIAL_OFFSET:clone()
VIEW.Z   = 1.0

Rect = {
	__new = fun(x,y,w,h) ? {
		this.x=x
		this.y=y
		this.w=w
		this.h=h
	}
	draw = fun() ? {
		c_r := 255
		c_g := 255
		c_b := 255
		if this.colliding ? {
			c_g = 0
			c_b = 0
		}
		VIEW:draw_rect(
		, this.x,this.y,this.w,this.h
		, c_r,c_g,c_b,255)
	}
	overlaps = fun(that) ? {
		if this.x + this.w <= that.x ? {
			ret false
		}
		if this.x >= that.x + that.w ? {
			ret false
		}
		if this.y + this.h <= that.y ? {
			ret false
		}
		if this.y >= that.y + that.h ? {
			ret false
		}
		ret true
	}
}

Player = new Rect(720,0,32,64)
Player.velocity = {x=0,y=0}
rects = {}
rects:add(Player)

for i = 0...10 ? {
	rects:add(new Rect(CENTER_X-32,CENTER_Y-32-i*64,64,64))
	rects:add(new Rect(CENTER_X-32+i*64,CENTER_Y-32,64,64))
}

abs ::= fun(x) {
	if x < 0 ? ret -x else ret x
}
while VIEW:poll() ? {
	time ::= VIEW.time

	Player.velocity.y += 4 * time
	Player.y += Player.velocity.y
	Player.x += Player.velocity.x

	if VIEW.keys['W'] & DOWN ? {
		Player.y -= 10
	}
	if VIEW.keys['S'] & DOWN ? {
		Player.y += 10
	}
	if VIEW.keys['A'] & DOWN ? {
		Player.x -= 10
	}
	if VIEW.keys['D'] & DOWN ? {
		Player.x += 10
	}
	for a = rects[...] ? {
		a.colliding = false
	}

	a ::= Player
	for b = rects[...] ? {
		if b == a ? {
			continue
		}
		if a:overlaps(b) ? {
			a.colliding = true
			xx := 0
			yy := 0
			if a.x < b.x ? xx = b.x - (a.x + a.w);
			else           xx = (b.x + b.w) - a.x;
			if a.y < b.y ? yy = b.y - (a.y + a.h);
			else           yy = (b.y + b.h) - a.y;
			xy ::= abs(xx) - abs(yy)
			if xy < 0 ? a.x += xx; else
			if xy > 0 ? {
				a.y += yy;
				Player.velocity.y = 0
			}
		}
	}

	for r = rects[...] ? {
		r:draw()
	}
}
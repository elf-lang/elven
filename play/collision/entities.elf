
objects={}
static_things={}
player=nil

spr=fun(tile,x,y,fx,fy)?{
	src_x::=ntoi(tile)%16*8
	src_y::=ntoi(tile)/16*8
	VIEW:set_src_rect(src_x,src_y,8,8)
	VIEW:draw_image(x,y,8,8,fx??0,fy??0)
}

tick_objs=fun(time)?{
	for obj=objects[...]?{
		obj:tick(time)
	}
}
draw_objs=fun()?{
	for obj=objects[...]?{
		obj:draw()
	}
}

spawn_player=fun(pos)?{
	player?=spawn(Player,pos)
	player.dead=false
	player.spd=vec2()
}

spawn=fun(objtype,pos)?{
	obj ::= new object(objtype,pos.x,pos.y)
	objects:add(obj)
	--> obj
}

object={
	__new=fun(type,x,y,w,h,tile,solid) ? {
		this.type=type
		this.x=x
		this.y=y
		this.xrem=0
		this.yrem=0
		this.w=w??8
		this.h=h??8

		this.tilespd=0
		this.tilenum=1
		this.tileoff=0
		this.tile=tile??0
		this.flip={x=false,y=false}

		this.color=WHITE
		this.solid=solid??true

		init ::= type.init
		if init?{
			init(time)
		}
	}
	tick=fun(time)?{
		tick ::= this.type.tick
		if tick?{
			tick(time)
		}
	}
	draw=fun()?{
		draw ::= this.type.draw
		if draw?{
			draw(time)
		}else{
			this.tileoff+=this.tilespd;
			offs ::= ntoi(this.tileoff)
			tile ::= this.tile+offs%this.tilenum
			y ::= this.y
			if this.tileoff>this.tilenum?{
				this.tileoff=0
			}
			if offs%3==0?{
				y+=1
			}
			spr(tile,this.x,y,this.flip.x,0)
		}
	}
	overlaps=fun(that,x_border,y_border)?{
		x_border ?= 0
		y_border ?= 0
		--> this.x + this.w > that.x - x_border
		&&  this.y + this.h > that.y - y_border
		&&  that.x + that.w > this.x - x_border
		&&  that.y + that.h > this.y - y_border
	}
	// todo: this doesn't return the wall normal for the
	// x axis
	get_wall_normal=fun(x_border,y_border)?{
		x_border ?= 0
		y_border ?= 0
		if this.y-y_border<=0 ?{
			--> vec2(0,1)
		}
		normal := vec2()
		for that = tilemap[...] ? {
			if this:overlaps(that,x_border,0) ? {
				normal.x = (this.x > that.x) * 2 - 1
				break
			}
		}
		for that = tilemap[...] ? {
			if this:overlaps(that,0,y_border) ? {
				normal.y = (this.y > that.y) * 2 - 1
				break
			}
		}
		--> normal
	}
	move=fun(move)?{
		for axis = 0,1 ? {
			if axis == 0 ? {
				this.xrem += move.x
				mov := floor(this.xrem)
				this.xrem -= mov
				this.x += mov
			} else {
				this.yrem += move.y
				mov := floor(this.yrem)
				this.yrem -= mov
				this.y += mov
			}

			tiles ::= {}
			for that = tilemap[...] ? {
				if this:overlaps(that) ? {
					if that.type == "spikes" ? {
						this.hit_spikes = true
					}
					this.colliding = true
					that.colliding = true
					if axis == 0 ? {
						if move.x > 0 ? {
							this.x = that.x - this.w;
						} else if move.x < 0 ? {
							this.x = that.x + that.w;
						}
					} else {
						if move.y > 0 ? {
							this.y = that.y - this.h;
						} else if move.y < 0 ? {
							this.y = that.y + that.h;
						}
					}
				}
			}

			// negative coordinates are not valid...
			if this.x < 0 ? this.x = 0;
			if this.y < 0 ? this.y = 0;

			// else if this.x + this.w > VIEW.res_x ? this.x = VIEW.res_x - this.w;
			// else if this.y + this.h > VIEW.res_y ? this.y = VIEW.res_y - this.h;
		}
	}
}

Player={
	_tag="player"
	init=fun()?{
		this.tile=3
		this.tilespd=0.15
		this.tilenum=3
		// (3*8)+imageframe*8
		this.imageframe=0
		this.framecounter=0
		this.spd=vec2()
		this.remainingdash=0
		this.dashacc=vec2()
		this.dashspd=vec2()
		this.dash_effect_time=0
		this.remainingjumps=MAX_NJUMPS
		this.jumpbuffer=0
		this.aircounter=0
	}
	tick=fun(time)?{
		dash ::= VIEW.keys[' '] & PRESSED
		input := vec2()
		if VIEW.keys['A'] & DOWN ? input.x -= 1;
		if VIEW.keys['D'] & DOWN ? input.x += 1;
		if VIEW.keys['S'] & DOWN ? input.y -= 1;
		if VIEW.keys['W'] & DOWN ? input.y += 1;
		if VIEW.keys['W'] & PRESSED ? {
			this.jumpbuffer = 4
		} else if this.jumpbuffer > 0 ? {
			this.jumpbuffer -= 1
		}

		walls ::= this:get_wall_normal(1,1)
		on_ground := walls.y>0

		if on_ground ? {
			this.aircounter=0
			this.color=RED
			// restore jumps
			if this.remainingjumps<MAX_NJUMPS ? {
				this.remainingjumps=MAX_NJUMPS
				this.color=GREEN
			}
		} else {
			this.aircounter+=1
			this.color=WHITE
		}


		this.dash_effect_time -=1
		if this.remainingdash > 0 ? {
			// init_object(smoke,this.x,this.y)
			this.remainingdash -= 1
			this.spd.x=appr(this.spd.x,this.dashspd.x,this.dashacc.x)
			this.spd.y=appr(this.spd.y,this.dashspd.y,this.dashacc.y)
		} else {
			maxrun := 1
			accel := 0.5
			deccel := 0.13
			on_ice := false

			if on_ground ? {
				if on_ice ? {
					accel=0.05
				}
			} else {
				accel=0.4
			}
			if abs(this.spd.x) > maxrun ? {
				this.color=BLUE
				this.spd.x=appr(this.spd.x,signz(this.spd.x)*maxrun,deccel)
			} else {
				// this.color=GREEN
				this.spd.x=appr(this.spd.x,input.x*maxrun,accel)
			}

			if this.spd.x != 0 ? {
				this.flip.x = this.spd.x < 0
			}


			// gravity
			maxfall := 2
			gravity := 0.21
			if this.spd.y >= 0.15 ? {
				gravity *= 0.60
			}
			// nearwall := this:get_wall_normal(1).x
			if input.x!=0 && walls.x!=0 ? {
				maxfall=0.45
			}

			iff on_ground ? {
				this.spd.y=appr(this.spd.y,-maxfall,gravity)
			}

			// jump
			if this.jumpbuffer>0 ? {
				if this.aircounter==0 ? {
					// we jumped when on the floor
					elf.audio.play("j0.wav")
					this.jumpbuffer=0
					this.aircounter=0
					this.spd.y=2
				} else if this.aircounter > 5 ? {
					// we jumped again when in the air, check
					// if we have wall supports, if so jump
					// from them
					if walls.x!=0 ? {
						elf.audio.play("j0.wav")
						this.jumpbuffer=0
						this.spd.y=1.75
						this.spd.x=walls.x*(maxrun+1)
					}
				}
			}

			// dashing
			if dash ? {
				if this.remainingjumps>0 ? {
					elf.audio.play("dash.wav")
					this.remainingjumps-=1
					this.remainingdash=6
					this.dash_effect_time=10
					d_full ::= 4
					dir ::= input
					if dir.x==0&&dir.y==0?{
						dir=vec2(this.flip.x,0)
					} else dir=dir:norm()
					this.spd=dir*d_full
					this.dashspd=dir*2
					this.dashacc=vec2(1.1,1.1):norm()
					if this.spd.y>0?{
						this.dashspd.y*=0.75
					}
				}else{
					// brrt...
				}
			}
		}
		this:move(this.spd)
	}
}

Key={
	_tag="key"
	init=fun()?{
		this.tile=2
	}
	tick=fun()?{
		if this:overlaps(player) ? {
		}
	}
	draw=fun()?{
		spr(this.tile,this.x,this.y+(sin(total_time*PI*0.8)+1)*2)
	}
}

Skull={
	_tag="skull"
	init=fun()?{
		this.tile=16*2
	}
	tick=fun()?{
		if this:overlaps(player) ? {
		}
	}
}

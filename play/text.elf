InitWindow("Text", 320 * 3, 180 * 3, 1)
InitAudio()
LoadFont("C:\\Windows\\Fonts\\times.ttf")


notenames := { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B" }
cmajor = { 'C', 'D', 'E', 'F', 'G', 'A', 'B' }

note_name_to_degree_map = {}
degree_to_note_name_map = {}
{
	i := 0
	for name = cmajor[...] ? {
		i += 1
		note_name_to_degree_map[name] = i
		degree_to_note_name_map[i] = name
	}
}

load_music_sheet = fun(name) ? {
	file := elf.open_file(name, "rb")
	defer elf.close_file(file)
	contents := elf.read_file(file)
	music := {}

	line_number := 1
	i := 0
	while i < contents:length() ? {
		notes := {}
		paren := 0

		if contents[i] == '(' ? {
			i += 1
			paren += 1
		}

		is_note := false
		loop := true
		while loop ? {
			c0 := contents[i + 0]
			c1 := contents[i + 1]

			i += 1
			if c0 >= '0' && c0 <= '9' ? {
				octave := 0
				if c1 == '\'' || c1 == '`' ? {
					i += 1
					octave = 1
				} else if c1 == '"' ? {
					i += 1
					octave = 2
				}
				note := "":append_char(c0) + octave
				notes:add(note)
				is_note = true
			} else if c0 == '-' ? {
				is_note = true
			} else if c0 == ' ' ? {
				is_note = true
			} else if c0 == '(' ? {
				elf.pf("unexpected '(', line: ", line_number, ", ", paren)
				elf.error()
			} else if c0 == ')' ? {
				if paren < 1 ? {
					elf.error("unexpected ')'")
				}
				loop = false
				break
			} else if c0 == '\t' ? {
			} else if c0 == '\n' ? {
				is_note = true
				line_number += 1
			} else if c0 == '\r' ? {
			} else {
				elf.pf("unexpected token: ", c0)
				elf.error()
			}
			if paren < 1 ? {
				loop = false
				break
			}
		}

		if paren > 0 ? {
			if contents[i] == ')' ? {
				i += 1
			} else {
				elf.pf("expected ')'")
			}
		}
		if is_note ? {
			music:add(notes)
		}
	}
	--> music
}



//
// every 12 semitones the frequency doubles, midi
// 0 is C-1 (C minus one).
//
get_note_frequency_from_midi_number = fun(midi) ? {
	--> 8.1758 * pow(2.0, midi / 12.0);
}

get_note_name_from_midi_number = fun(midi) ? {
	octave := midi / 12 - 1
	--> notenames:idx(midi % 12) + octave
}

get_note_index_from_note_name = fun(note) ? {
	name := note[0]
	octave := note[1]
	degree := note_name_to_degree_map[name]
	if degree == nil ? {
		degree = "nil"
	}
	--> degree
}

get_file_name_info = fun(name) ? {
	trash := "Kalimba - Kalimba "
	note := name[trash:length() + 0]
	octave := name[trash:length() + 1] - '0'
	// elf.pf(": ", note, ", ", octave)
	--> { note = note, octave = octave }
}
sounds := {}
elf.change_work_dir("kalimba\\sounds")
files := elf.list_folder(".")
for file = files[...] ? {
	info := get_file_name_info(file.name)
	sound := LoadSound(file.name)
	key := "":append_char(info.note):append(info.octave)
	sounds[key] = sound
}
elf.change_work_dir("..\\..")

random_note_name := nil

note_index := 0
note_speed := 5
note_thres := 60.0
note_timer := 0

music := load_music_sheet("kalimba\\ballade_pour_adeline.txt")

while PollWindow() ? {
	Clear()
	SetColor(255, 255, 255, 255)

	if random_note_name == nil ? {
		index := ntoi(elf.random() * 8)
		octave := ntoi(elf.random() * 3 + 4)
		note_char := cmajor:idx(index)
		random_note_name = "":append_char(note_char) + octave
	}
	if Button(' ') & 2 ? {
		if random_note_name ? {
			sound := sounds[random_note_name]
			if sound ? {
				elf.pf("Playing: '", random_note_name, "'")
				PlaySound(sound)
			}
		}
		random_note_name = nil
	}

	{
		play_note := false

		note_timer += note_speed
		if note_timer >= note_thres ? {
			note_timer = note_timer - note_thres

			play_note = true
		}

		if play_note ? {
			notes := music:idx(note_index)
			for note = notes[...] ? {
				degree := note[0] - '0'
				octave := note[1] - '0' + 4
				note_name := degree_to_note_name_map[degree]
				note := "":append_char(note_name) + octave
				sound := sounds[note]
				PlaySound(sound)
			}
			note_index += 1
		}
	}

	SolidFill()
	x := 32
	SetColor(255, 255, 255, 255)
	for i = 0...21 ? {
		jDrawRectangle(x + i * (32 + 2), 0, 32, 128)
	}

	// midi := 1
	// name := get_note_name_from_midi_number(midi)
	// hz := get_note_frequency_from_midi_number(midi)
	// DrawText(320, 180, "" + midi + ", " + name + ", " + hz)
	if random_note_name ? {
		// if elf.tagof(random_note_name) == "str" ? {
		note_degree := get_note_index_from_note_name(random_note_name)
		DrawText(320, 180, "" + random_note_name + ", " + note_degree)
		// }
	}

}